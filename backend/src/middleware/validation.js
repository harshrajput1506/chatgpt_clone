// Validation middleware for chat operations
export const validateChatCreation = (req, res, next) => {
    const { title, uid } = req.body;

    // uid is required for creating chats
    if (!uid || typeof uid !== 'string') {
        return res.status(400).json({ error: 'User ID (uid) is required and must be a string' });
    }

    if (uid.trim().length === 0) {
        return res.status(400).json({ error: 'User ID (uid) cannot be empty' });
    }

    // Title is optional now (will be generated by AI)
    if (title) {
        if (typeof title !== 'string') {
            return res.status(400).json({ error: 'Title must be a string' });
        }

        if (title.length > 200) {
            return res.status(400).json({ error: 'Title cannot exceed 200 characters' });
        }

        req.body.title = title.trim();
    }

    req.body.uid = uid.trim();
    next();
};

export const validateChatUpdate = (req, res, next) => {
    const { title } = req.body;

    if (!title || typeof title !== 'string') {
        return res.status(400).json({ error: 'Title is required and must be a string' });
    }

    if (title.trim().length === 0) {
        return res.status(400).json({ error: 'Title cannot be empty' });
    }

    if (title.length > 200) {
        return res.status(400).json({ error: 'Title cannot exceed 200 characters' });
    }

    req.body.title = title.trim();
    next();
};

export const validateUserAccess = (req, res, next) => {
    const { uid } = req.query;

    if (uid && typeof uid !== 'string') {
        return res.status(400).json({ error: 'User ID (uid) must be a string' });
    }

    next();
};
export const validateMessageCreation = (req, res, next) => {
    const { content, sender, imageId } = req.body;

    if (!content || typeof content !== 'string') {
        return res.status(400).json({ error: 'Content is required and must be a string' });
    }

    if (!sender || typeof sender !== 'string') {
        return res.status(400).json({ error: 'Sender is required and must be a string' });
    }

    if (content.trim().length === 0) {
        return res.status(400).json({ error: 'Content cannot be empty' });
    }

    if (content.length > 5000) {
        return res.status(400).json({ error: 'Content cannot exceed 5000 characters' });
    }

    if (!['user', 'assistant'].includes(sender)) {
        return res.status(400).json({ error: 'Sender must be either "user" or "assistant"' });
    }

    // Validate imageId if provided
    if (imageId) {
        const objectIdRegex = /^[0-9a-fA-F]{24}$/;
        if (!objectIdRegex.test(imageId)) {
            return res.status(400).json({ error: 'Invalid image ID format' });
        }
    }

    req.body.content = content.trim();
    next();
};
export const validateObjectId = (req, res, next) => {
    const { id, chatId, messageId } = req.params;
    const objectIdRegex = /^[0-9a-fA-F]{24}$/;

    if (id && !objectIdRegex.test(id)) {
        return res.status(400).json({ error: 'Invalid ID format' });
    }

    if (chatId && !objectIdRegex.test(chatId)) {
        return res.status(400).json({ error: 'Invalid chat ID format' });
    }

    if (messageId && !objectIdRegex.test(messageId)) {
        return res.status(400).json({ error: 'Invalid message ID format' });
    }

    next();
};

export const validateImageCreation = (req, res, next) => {
    const { publicId, url, originalName } = req.body;

    if (!publicId || typeof publicId !== 'string') {
        return res.status(400).json({ error: 'Public ID is required and must be a string' });
    }

    if (!url || typeof url !== 'string') {
        return res.status(400).json({ error: 'URL is required and must be a string' });
    }

    if (!originalName || typeof originalName !== 'string') {
        return res.status(400).json({ error: 'Original name is required and must be a string' });
    }

    if (publicId.trim().length === 0) {
        return res.status(400).json({ error: 'Public ID cannot be empty' });
    }

    if (url.trim().length === 0) {
        return res.status(400).json({ error: 'URL cannot be empty' });
    }

    if (originalName.trim().length === 0) {
        return res.status(400).json({ error: 'Original name cannot be empty' });
    }

    // Basic URL validation
    try {
        new URL(url);
    } catch (error) {
        return res.status(400).json({ error: 'Invalid URL format' });
    }

    req.body.publicId = publicId.trim();
    req.body.url = url.trim();
    req.body.originalName = originalName.trim();
    next();
};
